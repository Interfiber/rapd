{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rust audio player daemon RAPD is a media player daemon that runs in the background, and accepts TCP connections to control its built in media player. The benefit of this is low resource usage, and independent music storage. Manual Download latest Low resource usage RAPD is built in rust for speed, and saftey. Also since RAPD does not run a fancy user interface it can run with low CPU, and memory use in the background. RAPD at idle MPD at idle Easily configurable RAPD does not have a config file. Instead it has an auto launch script, here you can use rapc to set your configuration. You can also do this during runtime # set your music directory rapc config set music_dir $HOME /Music # set the packet format to be binary rapc config set packet_format bin # set the packet format to be json rapc config set packet_format json # enable notifications rapc config set notifications_enabled true Minimal RAPD is minimal, is has no gui by default, and has no ultra-complex features. Its just a music player","title":"Home"},{"location":"build_from_src/","text":"Build from source Warning This guide will not work on NixOS, please follow the NixOS guide instead! Step 1. Install rustup To build rapd, you need to install rustup . The following terminal command will install it curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh Step 2. Install required librarys RAPD will require the following libraries/tools installed on your system: PulseAudio, if using pipewire the pulseaudio pipewire plugin needs to be installed GCC Git Step 3. Clone RAPD source code You can clone the rapd source code with git as shown below git clone https://github.com/Interfiber/rapd.git Step 4. Build the source code You can build the source code using cargo, the output binary will be located at target/debug/rapd , or target/release/rapd cargo build # build debug cargo build --release # build release Step 5. Move the binary into your PATH Now mv the binary into a location in your PATH , such as /usr/bin , /usr/local/bin , or somewhere that you specified to be in your path.","title":"Non-NixOS systems"},{"location":"build_from_src/#build-from-source","text":"Warning This guide will not work on NixOS, please follow the NixOS guide instead!","title":"Build from source"},{"location":"build_from_src/#step-1-install-rustup","text":"To build rapd, you need to install rustup . The following terminal command will install it curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh","title":"Step 1. Install rustup"},{"location":"build_from_src/#step-2-install-required-librarys","text":"RAPD will require the following libraries/tools installed on your system: PulseAudio, if using pipewire the pulseaudio pipewire plugin needs to be installed GCC Git","title":"Step 2. Install required librarys"},{"location":"build_from_src/#step-3-clone-rapd-source-code","text":"You can clone the rapd source code with git as shown below git clone https://github.com/Interfiber/rapd.git","title":"Step 3. Clone RAPD source code"},{"location":"build_from_src/#step-4-build-the-source-code","text":"You can build the source code using cargo, the output binary will be located at target/debug/rapd , or target/release/rapd cargo build # build debug cargo build --release # build release","title":"Step 4. Build the source code"},{"location":"build_from_src/#step-5-move-the-binary-into-your-path","text":"Now mv the binary into a location in your PATH , such as /usr/bin , /usr/local/bin , or somewhere that you specified to be in your path.","title":"Step 5. Move the binary into your PATH"},{"location":"build_nix/","text":"Build from source on NixOS Note Currently rapd does not use flakes, support for flakes will be added soon! Step 1. Clone from GitHub You can clone the repo from github using the following command git clone https://github.com/Interfiber/rapd Step 2. Enter a Nix shell Now enter a nix-shell using the provided shell.nix , you can do this using the command below nix-shell Step 3. Build binarys Now build the binarys using cargo cargo build # build a debug build cargo build --release # build a release build Step 4. Move binarys into PATH Now mv the resulting binary into a directory thats in your PATH , such as ~/.local/share/bin","title":"NixOS systems"},{"location":"build_nix/#build-from-source-on-nixos","text":"Note Currently rapd does not use flakes, support for flakes will be added soon!","title":"Build from source on NixOS"},{"location":"build_nix/#step-1-clone-from-github","text":"You can clone the repo from github using the following command git clone https://github.com/Interfiber/rapd","title":"Step 1. Clone from GitHub"},{"location":"build_nix/#step-2-enter-a-nix-shell","text":"Now enter a nix-shell using the provided shell.nix , you can do this using the command below nix-shell","title":"Step 2. Enter a Nix shell"},{"location":"build_nix/#step-3-build-binarys","text":"Now build the binarys using cargo cargo build # build a debug build cargo build --release # build a release build","title":"Step 3. Build binarys"},{"location":"build_nix/#step-4-move-binarys-into-path","text":"Now mv the resulting binary into a directory thats in your PATH , such as ~/.local/share/bin","title":"Step 4. Move binarys into PATH"},{"location":"connect/","text":"Connect to the RAPD server Default config Key Value port 6702 protocol TCP address 127.0.0.1 Code examples Rust C++ use std :: io :: BufRead ; use std :: io :: BufReader ; use std :: io :: Write ; use std :: net :: TcpStream ; fn main () { // open a tcp stream to the RAPD server, on the default port let mut stream = TcpStream :: connect ( \"127.0.0.1:6702\" ). expect ( \"Failed to connect\" ); // ping the server stream . write ( b\"{ \\\" command \\\" : \\\" ping \\\" , \\\" params \\\" : [], \\\" client_name \\\" : \\\" e \\\" } \\n \" ) . expect ( \"Write failed\" ); // Create a buffered reader to read from the stream let mut reader = BufReader :: new ( stream ); loop { let mut line = String :: new (); // this will contain the line contents reader . read_line ( & mut line ). expect ( \"Line read failed\" ); // await the next line sent by the server, and read it into \"line\" // if the line is empty, the server has shutdown if line . is_empty () { println! ( \"Server sent empty packet, assuming shutdown!\" ); std :: process :: exit ( 1 ); } // print out what we got from the server print! ( \"Got from server: {}\" , & line ); } } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Connection guide"},{"location":"connect/#connect-to-the-rapd-server","text":"","title":"Connect to the RAPD server"},{"location":"connect/#default-config","text":"Key Value port 6702 protocol TCP address 127.0.0.1","title":"Default config"},{"location":"connect/#code-examples","text":"Rust C++ use std :: io :: BufRead ; use std :: io :: BufReader ; use std :: io :: Write ; use std :: net :: TcpStream ; fn main () { // open a tcp stream to the RAPD server, on the default port let mut stream = TcpStream :: connect ( \"127.0.0.1:6702\" ). expect ( \"Failed to connect\" ); // ping the server stream . write ( b\"{ \\\" command \\\" : \\\" ping \\\" , \\\" params \\\" : [], \\\" client_name \\\" : \\\" e \\\" } \\n \" ) . expect ( \"Write failed\" ); // Create a buffered reader to read from the stream let mut reader = BufReader :: new ( stream ); loop { let mut line = String :: new (); // this will contain the line contents reader . read_line ( & mut line ). expect ( \"Line read failed\" ); // await the next line sent by the server, and read it into \"line\" // if the line is empty, the server has shutdown if line . is_empty () { println! ( \"Server sent empty packet, assuming shutdown!\" ); std :: process :: exit ( 1 ); } // print out what we got from the server print! ( \"Got from server: {}\" , & line ); } } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Code examples"},{"location":"install/","text":"Installation of RAPD Note Currently you have to build rapd from source, you can find the guide here","title":"Installation"},{"location":"install/#installation-of-rapd","text":"Note Currently you have to build rapd from source, you can find the guide here","title":"Installation of RAPD"},{"location":"protocol/","text":"RAPD TCP protocol reference Note Read the connection guide to find out how to create a connection to the RAPD tcp server. Note Find a list of player states in the player states list Ping packet Request Response { \"command\" : \"ping\" , \"params\" : [], \"client_name\" : \"test\" } { \"message\" : \"RAPD server is up! pong\" , \"timestamp\" : \"000\" , \"failed\" : false } Play file packet Request Response { \"command\" : \"play_file\" , \"params\" : [ \"file_path\" , \"should_loop\" ], \"client_name\" : \"test\" } { \"message\" : \"Started audio playback\" , \"timestamp\" : \"000\" , \"failed\" : false } Player state packet Request Response { \"command\" : \"player_state\" , \"params\" : [], \"client_name\" : \"test\" } { \"message\" : \"[PLAYER STATE IS HERE]\" , \"timestamp\" : \"000\" , \"failed\" : false } Player stop packet Request Response { \"command\" : \"player_stop\" , \"params\" : [], \"client_name\" : \"test\" } { \"message\" : \"Stopped player\" , \"timestamp\" : \"000\" , \"failed\" : false } Player toggle pause packet Request Response { \"command\" : \"player_toggle_pause\" , \"params\" : [], \"client_name\" : \"test\" } { \"message\" : \"Toggled pause for player, is_paused = true/false\" , \"timestamp\" : \"000\" , \"failed\" : false } Player length packet Request Response { \"command\" : \"player_length\" , \"params\" : [], \"client_name\" : \"test\" } { \"message\" : { \"hour\" : 0 , \"min\" : 0 , \"second\" : 0 }, \"timestamp\" : \"000\" , \"failed\" : false } Player time packet Request Response { \"command\" : \"player_time\" , \"params\" : [], \"client_name\" : \"test\" } { \"message\" : { \"hour\" : 0 , \"min\" : 0 , \"second\" : 0 }, \"timestamp\" : \"000\" , \"failed\" : false } Player file packet Request Response { \"command\" : \"player_file\" , \"params\" : [], \"client_name\" : \"test\" } { \"message\" : \"/path/to/file\" , \"timestamp\" : \"000\" , \"failed\" : false }","title":"Protocol reference"},{"location":"protocol/#rapd-tcp-protocol-reference","text":"Note Read the connection guide to find out how to create a connection to the RAPD tcp server. Note Find a list of player states in the player states list","title":"RAPD TCP protocol reference"},{"location":"protocol/#ping-packet","text":"Request Response { \"command\" : \"ping\" , \"params\" : [], \"client_name\" : \"test\" } { \"message\" : \"RAPD server is up! pong\" , \"timestamp\" : \"000\" , \"failed\" : false }","title":"Ping packet"},{"location":"protocol/#play-file-packet","text":"Request Response { \"command\" : \"play_file\" , \"params\" : [ \"file_path\" , \"should_loop\" ], \"client_name\" : \"test\" } { \"message\" : \"Started audio playback\" , \"timestamp\" : \"000\" , \"failed\" : false }","title":"Play file packet"},{"location":"protocol/#player-state-packet","text":"Request Response { \"command\" : \"player_state\" , \"params\" : [], \"client_name\" : \"test\" } { \"message\" : \"[PLAYER STATE IS HERE]\" , \"timestamp\" : \"000\" , \"failed\" : false }","title":"Player state packet"},{"location":"protocol/#player-stop-packet","text":"Request Response { \"command\" : \"player_stop\" , \"params\" : [], \"client_name\" : \"test\" } { \"message\" : \"Stopped player\" , \"timestamp\" : \"000\" , \"failed\" : false }","title":"Player stop packet"},{"location":"protocol/#player-toggle-pause-packet","text":"Request Response { \"command\" : \"player_toggle_pause\" , \"params\" : [], \"client_name\" : \"test\" } { \"message\" : \"Toggled pause for player, is_paused = true/false\" , \"timestamp\" : \"000\" , \"failed\" : false }","title":"Player toggle pause packet"},{"location":"protocol/#player-length-packet","text":"Request Response { \"command\" : \"player_length\" , \"params\" : [], \"client_name\" : \"test\" } { \"message\" : { \"hour\" : 0 , \"min\" : 0 , \"second\" : 0 }, \"timestamp\" : \"000\" , \"failed\" : false }","title":"Player length packet"},{"location":"protocol/#player-time-packet","text":"Request Response { \"command\" : \"player_time\" , \"params\" : [], \"client_name\" : \"test\" } { \"message\" : { \"hour\" : 0 , \"min\" : 0 , \"second\" : 0 }, \"timestamp\" : \"000\" , \"failed\" : false }","title":"Player time packet"},{"location":"protocol/#player-file-packet","text":"Request Response { \"command\" : \"player_file\" , \"params\" : [], \"client_name\" : \"test\" } { \"message\" : \"/path/to/file\" , \"timestamp\" : \"000\" , \"failed\" : false }","title":"Player file packet"},{"location":"states/","text":"Player states playerstate::idle The player is doing nothing, its waiting for requests playerstate::playing The player is playing an audio file playerstate::paused The player was playing an audio file, but is now paused.","title":"Player states"},{"location":"states/#player-states","text":"","title":"Player states"},{"location":"states/#playerstateidle","text":"The player is doing nothing, its waiting for requests","title":"playerstate::idle"},{"location":"states/#playerstateplaying","text":"The player is playing an audio file","title":"playerstate::playing"},{"location":"states/#playerstatepaused","text":"The player was playing an audio file, but is now paused.","title":"playerstate::paused"}]}