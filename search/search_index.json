{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RAPD Rust Audio Player Daemon Features Low CPU, and Memory Footprint Use any client you want without migrating you're music Runs in the background so music can run without a Xorg, or Wayland session running Anybody can build a client for RAPD","title":"Home"},{"location":"#rapd","text":"Rust Audio Player Daemon","title":"RAPD"},{"location":"#features","text":"Low CPU, and Memory Footprint Use any client you want without migrating you're music Runs in the background so music can run without a Xorg, or Wayland session running Anybody can build a client for RAPD","title":"Features"},{"location":"adding-music/","text":"This guide will help you add music to rapd, note that the config guide should be completed first. How rapd stores music Rapd keeps track of all of you're music in a database located in ~/.local/share/rapd/db.json . This file has a list of files that rapd knows is music Adding music To add music simply place all of the music files in the music_dir we set in the creating a config chapter, as this is where rapd will look for music. Rebuilding the music database Rapd dosent auto-detect music changes, so when ever you have updated you're library you need to tell rapd to rebuild its database. You can do this using a rapd client(in this case rapc) like below rapc db_rebuild # Rebuilt database This will rebuild rapd's music database with all of the new music added.","title":"Adding Music"},{"location":"adding-music/#how-rapd-stores-music","text":"Rapd keeps track of all of you're music in a database located in ~/.local/share/rapd/db.json . This file has a list of files that rapd knows is music","title":"How rapd stores music"},{"location":"adding-music/#adding-music","text":"To add music simply place all of the music files in the music_dir we set in the creating a config chapter, as this is where rapd will look for music.","title":"Adding music"},{"location":"adding-music/#rebuilding-the-music-database","text":"Rapd dosent auto-detect music changes, so when ever you have updated you're library you need to tell rapd to rebuild its database. You can do this using a rapd client(in this case rapc) like below rapc db_rebuild # Rebuilt database This will rebuild rapd's music database with all of the new music added.","title":"Rebuilding the music database"},{"location":"auto-start/","text":"This guide can help you get rapd autostarting with you're window manager or desktop environment Auto starting with bspwm You can auto-start rapd easily in bspwm by making it execute in you're bspwmrc like below: # .. Snip .. rapd & # Notice the & sign, this will detatch rapd from the process Auto starting with awesomewm You can auto-start rapd in awesomewm using the awful.spawn.with_shell . Add the following line to youre rc.lua to auto start it. -- .. Snip .. awful.spawn.with_shell(\"rapd\") Auto starting with kde Kde has a guide on how to create login scripts, simply create one to run the rapd command. You can find the guide here Auto starting in macOS MacOS has support for launch daemons, you can create one of these to auto start rapd on system boot or user login. You can find the docs for them here . Auto starting with any X window manager or desktop environment If you're window manager or desktop environment is not listed here you can add a new line to you're ~/.xinitrc that makes rapd start on login. Note that this might not work if you use a display manager. Open up you're .xinitrc and add the following line BEFORE you spawn in you're window manager # .. Snip .. rapd & # Make sure to include the & sign","title":"Auto starting"},{"location":"auto-start/#auto-starting-with-bspwm","text":"You can auto-start rapd easily in bspwm by making it execute in you're bspwmrc like below: # .. Snip .. rapd & # Notice the & sign, this will detatch rapd from the process","title":"Auto starting with bspwm"},{"location":"auto-start/#auto-starting-with-awesomewm","text":"You can auto-start rapd in awesomewm using the awful.spawn.with_shell . Add the following line to youre rc.lua to auto start it. -- .. Snip .. awful.spawn.with_shell(\"rapd\")","title":"Auto starting with awesomewm"},{"location":"auto-start/#auto-starting-with-kde","text":"Kde has a guide on how to create login scripts, simply create one to run the rapd command. You can find the guide here","title":"Auto starting with kde"},{"location":"auto-start/#auto-starting-in-macos","text":"MacOS has support for launch daemons, you can create one of these to auto start rapd on system boot or user login. You can find the docs for them here .","title":"Auto starting in macOS"},{"location":"auto-start/#auto-starting-with-any-x-window-manager-or-desktop-environment","text":"If you're window manager or desktop environment is not listed here you can add a new line to you're ~/.xinitrc that makes rapd start on login. Note that this might not work if you use a display manager. Open up you're .xinitrc and add the following line BEFORE you spawn in you're window manager # .. Snip .. rapd & # Make sure to include the & sign","title":"Auto starting with any X window manager or desktop environment"},{"location":"create-a-config/","text":"A guide to create a rapd config Why? Before we can add any music, rapd needs a config. The config we will create will tell rapd where it should look for music. Creating the config On first startup rapd should create a config file at ~/.config/rapd/config.toml , which is empty by default. Lets add the following content to that file [configuration] # replace the path below to the path to you're music folder. music_dir = \"/home/intefiber/Music\" What this does is it tells rapd where music should be located, in this case thats in our home-directory in a Music folder(make sure this exists). Once this file is saved we are ready to go!","title":"Create a config"},{"location":"create-a-config/#why","text":"Before we can add any music, rapd needs a config. The config we will create will tell rapd where it should look for music.","title":"Why?"},{"location":"create-a-config/#creating-the-config","text":"On first startup rapd should create a config file at ~/.config/rapd/config.toml , which is empty by default. Lets add the following content to that file [configuration] # replace the path below to the path to you're music folder. music_dir = \"/home/intefiber/Music\" What this does is it tells rapd where music should be located, in this case thats in our home-directory in a Music folder(make sure this exists). Once this file is saved we are ready to go!","title":"Creating the config"},{"location":"install-gnu-linux/","text":"How to install rapd on GNU/Linux Installing from Source If you want more the latest features in the master branch its recommended you build from source. First clone the source repo with git: git clone https://github.com/Interfiber/rapd.git Then install rustup and switch to the latest version like this: rustup default stable . Then cd into the cloned directory and run the build: # add features like this: # export RAPD_EXTRA_FEATURES=\"notifyplugin,discordplugin\" sh install.sh --build-release sh install.sh --install-release Installing from the AUR RAPD from the aur uses the latest release of rapd from github, to install it use an AUR helper like below: yay -S rapd # yay is used here","title":"Installing on GNU/Linux"},{"location":"install-gnu-linux/#installing-from-source","text":"If you want more the latest features in the master branch its recommended you build from source. First clone the source repo with git: git clone https://github.com/Interfiber/rapd.git Then install rustup and switch to the latest version like this: rustup default stable . Then cd into the cloned directory and run the build: # add features like this: # export RAPD_EXTRA_FEATURES=\"notifyplugin,discordplugin\" sh install.sh --build-release sh install.sh --install-release","title":"Installing from Source"},{"location":"install-gnu-linux/#installing-from-the-aur","text":"RAPD from the aur uses the latest release of rapd from github, to install it use an AUR helper like below: yay -S rapd # yay is used here","title":"Installing from the AUR"},{"location":"install-macos/","text":"How to install RAPD on MacOS From Source First install rustup and switch to the latest version like this: rustup default stable . Then clone the source repo like this: git clone https://github.com/Interfiber/rapd.git And build the release like this: cargo build --release # or with features like this: cargo build --release --features discordplugin,notifyplugin Then install the binarys with the following: sudo mkdir -p /usr/local/bin sudo mv target/release/rapd /usr/local/bin/rapd sudo mv target/release/rapc /usr/local/bin/rapc","title":"Installing on MacOS"},{"location":"install-macos/#from-source","text":"First install rustup and switch to the latest version like this: rustup default stable . Then clone the source repo like this: git clone https://github.com/Interfiber/rapd.git And build the release like this: cargo build --release # or with features like this: cargo build --release --features discordplugin,notifyplugin Then install the binarys with the following: sudo mkdir -p /usr/local/bin sudo mv target/release/rapd /usr/local/bin/rapd sudo mv target/release/rapc /usr/local/bin/rapc","title":"From Source"},{"location":"playing-music/","text":"This guide will help you get started playing music using rapc Play the music Rapc has a command to print the music database and select a entry from it to play this command is called db_select . You can use it like below rapc db_select This will print out the music database files, with numbers beside them selecting the number and pressing enter will play it. Playing music directly from disk If you want to play music directly from disk, without the music database you can use rapc to play it directly like below rapc play /path/to/music/file.mp3 Print the current playing file To print the current playing file you can use the following command rapc player_file # OR use --full-path for the full file path rapc player_file --full-path Stop the player To stop the playing of the current song you can use the following command rapc player_stop","title":"Playing Music"},{"location":"playing-music/#play-the-music","text":"Rapc has a command to print the music database and select a entry from it to play this command is called db_select . You can use it like below rapc db_select This will print out the music database files, with numbers beside them selecting the number and pressing enter will play it.","title":"Play the music"},{"location":"playing-music/#playing-music-directly-from-disk","text":"If you want to play music directly from disk, without the music database you can use rapc to play it directly like below rapc play /path/to/music/file.mp3","title":"Playing music directly from disk"},{"location":"playing-music/#print-the-current-playing-file","text":"To print the current playing file you can use the following command rapc player_file # OR use --full-path for the full file path rapc player_file --full-path","title":"Print the current playing file"},{"location":"playing-music/#stop-the-player","text":"To stop the playing of the current song you can use the following command rapc player_stop","title":"Stop the player"},{"location":"protocol/","text":"Guide to the RAPD server protocol and API The TCP socket RAPD will listen on the following address by default: http://127.0.0.1:8932 . Sending requests One a client has connected to the socket, the server will wait for a request to be sent, once one is sent it will be parsed and a response is sent back. Once the server completes this it will terminate the connection. Basic request All requests sent to the rapd server MUST be json, and the server will parse them as json. All requests follow the structure like below: { \"request_type\": \"type\", \"key\": \"value\" } current_file About: Returns the current playing file, if nothing it returns empty Expects: { \"request_type\": \"current_file\" } Returns: { \"error\": true/false, \"message\": \"empty or file path\", \"request_type\": \"Succeeded/??\" } get_music About: Returns the contents of the JSON music database Expects: { \"request_type\": \"get_music\" } Returns: { \"error\": true/false, \"message\": [\"foo.mp3\", \"bar.mp3\"], \"request_type\": \"Succeeded/??\" } play_audio_file About: Plays an audio file directly from disk Expects: { \"request_type\": \"play_audio_file\", \"audio_file_path\": \"path/to/audio/file.mp3\", \"loop_audio\": true/false } Returns: { \"error\": true/false, \"message\": \"Attempting audio playback.../??\", \"request_type\": \"Succeeded\" } stop_player About: Halts the audio play, DOES NOT shutdown the rapd server Expects: { \"request_type\": \"stop_player\" } Returns: { \"error\": true/false, \"message\": \"Sent stop request to player\", \"request_type\": \"Succedded/??\" } server_shutdown About: Sends a shutdown request to the rapd server Expects: { \"request_type\": \"server_shutdown\" } Returns: { \"error\": true/false, \"message\": \"Shutting down server\", \"request_type\": \"Succeeded/??\" } rebuild_music_database About: Rebuilds the rapd music database from disk Expects: { \"request_type\": \"rebuild_music_db\" } Returns: { \"error\": true/false, \"message\": \"Rebuilt the music database/??\" \"request_type\": \"Succeeded/??\" } metadata_set_title About: Sets the title for an audio file Expects: { \"request_type\": \"metadata_set_title\", \"path\": \"path/to/music/file.mp3\", \"new_value\": \"Title of music\" } Returns: { \"error\": true/false, \"message\": \"Set title/??\", \"request_type\": \"Success/??\" } metadata_get_title About: Gets the title from an audio file Expects: { \"request_type\": \"metadata_get_title\", \"path\": \"/path/to/audio/file.mp3\" } Returns: { \"error\": true/false, \"message\": \"title of audio\", \"request_type\": \"Success\" }","title":"RAPD Protocol"},{"location":"protocol/#the-tcp-socket","text":"RAPD will listen on the following address by default: http://127.0.0.1:8932 .","title":"The TCP socket"},{"location":"protocol/#sending-requests","text":"One a client has connected to the socket, the server will wait for a request to be sent, once one is sent it will be parsed and a response is sent back. Once the server completes this it will terminate the connection.","title":"Sending requests"},{"location":"protocol/#basic-request","text":"All requests sent to the rapd server MUST be json, and the server will parse them as json. All requests follow the structure like below: { \"request_type\": \"type\", \"key\": \"value\" }","title":"Basic request"},{"location":"protocol/#current_file","text":"About: Returns the current playing file, if nothing it returns empty Expects: { \"request_type\": \"current_file\" } Returns: { \"error\": true/false, \"message\": \"empty or file path\", \"request_type\": \"Succeeded/??\" }","title":"current_file"},{"location":"protocol/#get_music","text":"About: Returns the contents of the JSON music database Expects: { \"request_type\": \"get_music\" } Returns: { \"error\": true/false, \"message\": [\"foo.mp3\", \"bar.mp3\"], \"request_type\": \"Succeeded/??\" }","title":"get_music"},{"location":"protocol/#play_audio_file","text":"About: Plays an audio file directly from disk Expects: { \"request_type\": \"play_audio_file\", \"audio_file_path\": \"path/to/audio/file.mp3\", \"loop_audio\": true/false } Returns: { \"error\": true/false, \"message\": \"Attempting audio playback.../??\", \"request_type\": \"Succeeded\" }","title":"play_audio_file"},{"location":"protocol/#stop_player","text":"About: Halts the audio play, DOES NOT shutdown the rapd server Expects: { \"request_type\": \"stop_player\" } Returns: { \"error\": true/false, \"message\": \"Sent stop request to player\", \"request_type\": \"Succedded/??\" }","title":"stop_player"},{"location":"protocol/#server_shutdown","text":"About: Sends a shutdown request to the rapd server Expects: { \"request_type\": \"server_shutdown\" } Returns: { \"error\": true/false, \"message\": \"Shutting down server\", \"request_type\": \"Succeeded/??\" }","title":"server_shutdown"},{"location":"protocol/#rebuild_music_database","text":"About: Rebuilds the rapd music database from disk Expects: { \"request_type\": \"rebuild_music_db\" } Returns: { \"error\": true/false, \"message\": \"Rebuilt the music database/??\" \"request_type\": \"Succeeded/??\" }","title":"rebuild_music_database"},{"location":"protocol/#metadata_set_title","text":"About: Sets the title for an audio file Expects: { \"request_type\": \"metadata_set_title\", \"path\": \"path/to/music/file.mp3\", \"new_value\": \"Title of music\" } Returns: { \"error\": true/false, \"message\": \"Set title/??\", \"request_type\": \"Success/??\" }","title":"metadata_set_title"},{"location":"protocol/#metadata_get_title","text":"About: Gets the title from an audio file Expects: { \"request_type\": \"metadata_get_title\", \"path\": \"/path/to/audio/file.mp3\" } Returns: { \"error\": true/false, \"message\": \"title of audio\", \"request_type\": \"Success\" }","title":"metadata_get_title"}]}